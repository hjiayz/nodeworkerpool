!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
Pool	index.js	/^class Pool {$/;"	c
Pool	test.js	/^let Pool = require('.\/index.js');$/;"	v
add	test.js	/^let add = (a, b) => a + b;$/;"	v
author	package.json	/^  "author": "hjiayz",$/;"	s
constructor	index.js	/^  constructor(worker_number) {$/;"	m	class:Pool
define	index.js	/^  async define(name, func) {$/;"	m	class:Pool
define_list	index.js	/^  async define_list(list) {$/;"	m	class:Pool
description	package.json	/^  "description": "",$/;"	s
exec	index.js	/^  async exec(func_name, func_params, kind) {$/;"	m	class:Pool
free	index.js	/^  free() {$/;"	m	class:Pool
func_list	worker.js	/^let func_list = {};$/;"	v
inc	test.js	/^let inc = a => a + 1;$/;"	v
is_tran	worker.js	/^let is_tran = item => {$/;"	v
la	test.js	/^let la = 10000000;$/;"	v
license	package.json	/^  "license": "AGPL-3.0"$/;"	s
main	package.json	/^  "main": "index.js",$/;"	s
map	index.js	/^  async map(func_name, value_list, block_size) {$/;"	m	class:Pool
name	package.json	/^  "name": "nodeworkerpool",$/;"	s
numCPUs	index.js	/^const numCPUs = require('os').cpus().length;$/;"	C
oneresult	test.js	/^let oneresult = params.map(inc).reduce(add);$/;"	v
params	test.js	/^let params = new Array(la);$/;"	v
params2	test.js	/^let params2 = params.slice();$/;"	v
pool	test.js	/^let pool = new Pool();$/;"	v
reduce	index.js	/^  async reduce(func_name, value_list, block_size) {$/;"	m	class:Pool
result_trans	worker.js	/^let result_trans = result =>$/;"	v
scripts	package.json	/^  "scripts": {$/;"	o
test	package.json	/^    "test": "node --experimental-worker test.js"$/;"	s	object:scripts
test	test.js	/^async function test() {$/;"	f
version	package.json	/^  "version": "1.0.0",$/;"	s
worker	index.js	/^const worker = require('worker_threads');$/;"	C
worker	worker.js	/^const worker = require('worker_threads');$/;"	C
